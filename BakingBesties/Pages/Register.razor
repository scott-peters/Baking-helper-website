@page "/Register"

@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<style>
    .nav-item {
        padding-right: 20px
    }

    .form-inline {
        position: absolute;
        padding-right: 10px;
        right: 0px;
    }

    .button {
        border: none;
        color: white;
        padding: 16px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

    .button1 {
        background-color: white;
        color: black;
        border: 2px solid #4CAF50;
    }

        .button1:hover {
            background-color: #4CAF50;
            color: white;
        }

    .button2 {
        background-color: white;
        color: black;
        border: 2px solid #008CBA;
    }

        .button2:hover {
            background-color: #008CBA;
            color: white;
        }

    .parent {
        display: table;
        width: 100%;
    }
    /* got how to center from here
        https://stackoverflow.com/questions/22658141/css-center-form-in-page-horizontally-and-vertically
    */
    #form_login {
        left: 57%;
        top: 47%;
        position: absolute;
        transform: translate(-50%, -50%);
    }

    .error-message {
        color: red;
    }
</style>


<div align="center">

    <img src="bblogo.png" alt="Baking Besties" width="200" height="150" />

</div>

<div align="center">
    <h2>Signup</h2>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{

    <div align="center" class="error-message">@errorMessage</div>
}

<div align="center">
    <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="username">Username:</label>
            <InputText id="username" placeholder="Username" @bind-Value="loginModel.Username" />
        </div>

        <div>
            <label for="email">Email:</label>
            <InputText id="email" placeholder="email@email.com" @bind-Value="loginModel.Email" />
        </div>

        <div>
            <label for="password">Password:</label>
            <InputText id="password" placeholder="Password" @bind-Value="loginModel.Password" type="password" />
        </div>

        <div>
            <label for="password2">Re-enter Password:</label>
            <InputText id="password2" placeholder="Password" @bind-Value="loginModel.Password2" type="password" />
        </div>

        <button type="submit" class="button button2">Register</button>
        <a href="login">Back to Login</a>
    </EditForm>
</div>


@code {

    private LoginModel loginModel = new LoginModel();

    string errorMessage = "";

    private void HandleValidSubmit()
    {
        // Here, you can perform your authentication logic.
        // If the authentication is successful, redirect to the home page.
        // Otherwise, show an error message.

        if (loginModel.Username == "test" && loginModel.Password == "password" &&
            loginModel.Password2 == "password" && loginModel.Email == "test@email.com")
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (loginModel.Email != "test@email.com" && loginModel.Username != "test")
        {
            // Show an error message
            errorMessage = "Invalid email and Invalid Username or Password.";
        }
        else if (loginModel.Password != "password" && loginModel.Password2 != "password")
        {
            errorMessage = "Passwords need to be the same.";
        }
        else if (loginModel.Email != "test@email.com")
        {
            // Show an error message
            errorMessage = "Invalid email.";
        }
        else
        {
            // Show an error message
            errorMessage = "Invalid Username or Password.";
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password2 { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        public string Email { get; set; }
    }

    }


